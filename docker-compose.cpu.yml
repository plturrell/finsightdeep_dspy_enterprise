version: '3.8'

services:
  # Main DSPy API service
  dspy-api:
    build:
      context: .
      dockerfile: Dockerfile.cpu
    image: dspy-cpu:latest
    container_name: dspy-api
    restart: unless-stopped
    ports:
      - "8000:8000"
    volumes:
      - ./data:/app/data
      - ./models:/app/models
      - ~/.cache:/root/.cache # Share model cache with host
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_API_BASE=${OPENAI_API_BASE:-https://api.openai.com/v1}
      - DSPY_CACHE_DIR=/app/data/cache
      - DSPY_ENABLE_INTERFACE_CHECKS=1
      - DSPY_BENCHMARKING_ENABLED=1
      - LOG_LEVEL=INFO
      - PYTHONUNBUFFERED=1
    command: python -m dspy.frontend.cli --host 0.0.0.0 --port 8000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Secondary DSPy server for dedicated workloads
  dspy-server:
    build:
      context: .
      dockerfile: Dockerfile.cpu
    image: dspy-cpu:latest
    container_name: dspy-server
    restart: unless-stopped
    ports:
      - "8001:8001"
    volumes:
      - ./data:/app/data
      - ./models:/app/models
      - ~/.cache:/root/.cache # Share model cache with host
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_API_BASE=${OPENAI_API_BASE:-https://api.openai.com/v1}
      - DSPY_CACHE_DIR=/app/data/cache
      - DSPY_ENABLE_INTERFACE_CHECKS=1
      - DSPY_BENCHMARKING_ENABLED=1
      - LOG_LEVEL=INFO
      - MODEL_PATH=/app/models
      - PYTHONUNBUFFERED=1
    command: >
      python -c "
      import dspy
      from dspy.utils.benchmarking import enable_benchmarking
      from dspy.utils.interface_checks import validate_complete_pipeline
      
      # Enable benchmarking
      enable_benchmarking()
      
      # Start a basic API server
      from fastapi import FastAPI
      from fastapi.middleware.cors import CORSMiddleware
      import uvicorn
      
      app = FastAPI(title='DSPy API')
      app.add_middleware(
          CORSMiddleware,
          allow_origins=['*'],
          allow_credentials=True,
          allow_methods=['*'],
          allow_headers=['*'],
      )
      
      @app.get('/')
      def read_root():
          return {'status': 'DSPy Server running', 'version': dspy.__version__}
      
      @app.get('/health')
      def health_check():
          return {'status': 'healthy', 'validation': validate_complete_pipeline()}
      
      uvicorn.run(app, host='0.0.0.0', port=8001)
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  
  # Vector database for retrieval
  qdrant:
    image: qdrant/qdrant:latest
    container_name: dspy-qdrant
    restart: unless-stopped
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - ./data/qdrant:/qdrant/storage
    environment:
      - QDRANT_ALLOW_RECOVERY_MODE=true
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/readiness"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Web dashboard
  traefik:
    image: traefik:v2.10
    container_name: dspy-traefik
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./config/traefik:/etc/traefik
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--accesslog=true"
      - "--log.level=INFO"
    healthcheck:
      test: ["CMD", "traefik", "healthcheck", "--ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring 
  prometheus:
    image: prom/prometheus:latest
    container_name: dspy-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus:/etc/prometheus
      - ./data/prometheus:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/usr/share/prometheus/console_libraries"
      - "--web.console.templates=/usr/share/prometheus/consoles"
    depends_on:
      - dspy-api
      - dspy-server
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  grafana:
    image: grafana/grafana:latest
    container_name: dspy-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - ./data/grafana:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=dspy-admin
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel,grafana-clock-panel
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # App telemetry collection
  otel-collector:
    image: otel/opentelemetry-collector:latest
    container_name: dspy-otel-collector
    restart: unless-stopped
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./config/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      - "8888:8888"   # metrics endpoint
    depends_on:
      - prometheus

  # Security scanning
  trivy:
    image: aquasec/trivy:latest
    container_name: dspy-trivy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./data/trivy:/root/.cache/
    command: ["image", "--no-progress", "dspy-cpu:latest"]
    depends_on:
      - dspy-api
    profiles:
      - security

volumes:
  cache:
  models:
  data: