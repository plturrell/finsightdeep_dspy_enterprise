FROM nvcr.io/nvidia/pytorch:23.10-py3

LABEL maintainer="DSPy Team"
LABEL description="DSPy with NVIDIA GPU Optimization and SAP HANA Cloud integration"

# Set working directory
WORKDIR /app

# Install system dependencies 
RUN apt-get update && apt-get install -y --no-install-recommends \
    git \
    wget \
    curl \
    software-properties-common \
    build-essential \
    ca-certificates \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements
COPY pyproject.toml uv.lock /app/

# Install DSPy in development mode with all extras
# Install uv package manager
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir uv && \
    uv sync --all-extras --all-groups

# Install SAP HANA Cloud client
RUN pip install --no-cache-dir hdbcli

# Copy the source code 
COPY . /app/

# Install the package in development mode
RUN pip install -e .

# Set environment variables for NVIDIA GPU
ENV NVIDIA_VISIBLE_DEVICES all
ENV NVIDIA_DRIVER_CAPABILITIES compute,utility
ENV CUDA_HOME /usr/local/cuda

# Set environment variables for tensor core optimization
ENV DSPY_ENABLE_TENSOR_CORES=1
ENV DSPY_TENSOR_CORE_MODE="auto"

# Set environment variables for optimized memory usage
ENV PYTORCH_CUDA_ALLOC_CONF="max_split_size_mb:128"

# Initialize torch extension cache
RUN python -c "import torch; torch.utils.cpp_extension.load(name='dummy', sources=[''])" || true

# Set TF32 for PyTorch matrices (can be overridden at runtime)
RUN python -c "import torch; torch.backends.cuda.matmul.allow_tf32 = True; torch.backends.cudnn.allow_tf32 = True" || true

# Verify CUDA installation
RUN python -c "import torch; print('CUDA available:', torch.cuda.is_available()); print('CUDA version:', torch.version.cuda if torch.cuda.is_available() else 'N/A'); print('GPU count:', torch.cuda.device_count() if torch.cuda.is_available() else 0); print('GPU name:', torch.cuda.get_device_name(0) if torch.cuda.is_available() and torch.cuda.device_count() > 0 else 'N/A')"

# Create directories for data and models
RUN mkdir -p /app/data/cache /app/models

# Set up healthcheck
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD curl -f http://localhost:8000/api/v1/status || exit 1

# Command to start the DSPy API server
CMD ["python", "-c", "import os, sys, logging; from dspy.frontend.server import start_server; from dspy.frontend.config import FrontendConfig; logging.basicConfig(level=getattr(logging, os.environ.get('LOG_LEVEL', 'INFO')), format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'); config = FrontendConfig(host='0.0.0.0', port=8000, enable_cors=True, cors_origins=['*']); start_server(config=config)"]